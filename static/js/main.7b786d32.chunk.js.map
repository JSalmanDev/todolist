{"version":3,"sources":["components/NavBar.js","store/types/types.js","store/actions/TodosAction.js","components/Todos.js","components/Contact.js","App.js","reportWebVitals.js","store/reducers/TodosReducer.js","store/reducers/TodosFilterReducer.js","index.js"],"names":["withRouter","props","gotoRoute","e","endpoint","preventDefault","history","push","Navbar","bg","variant","Nav","className","Link","href","onClick","ADD_TASK","DELETE_TASK","COMPLETE_TASK","EDIT_TASK","SET_TODOLIST_FILTER","addTodo","title","type","completeTodo","id","deleteTodo","editTodo","todolistFilter","filter","setTodoListFilter","todolistFilters","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","Todos","a","state","objectToEdit","trim","length","setState","invalid","handleComplete","handleEdit","elem","handleDelete","invaid","Row","Col","md","span","offset","Form","onSubmit","Group","controlId","Control","name","required","placeholder","value","this","onChange","target","onFocus","Button","Table","hover","list","map","style","width","defaultChecked","completed","Badge","pill","selectedFilter","React","Component","getTodoList","todos","t","Error","connect","todoslist","actions","Contact","handleTextChange","handleSubmit","firstName","lastName","email","comments","Label","as","rows","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","getId","reduce","maxId","todo","Math","max","reducer","action","Object","assign","updated","creducer","combineReducers","todosActionReducer","store","window","devToolsExtension","createStore","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.7b786d32.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst NavBar = (props) => {\r\n\r\n    const gotoRoute = (e, endpoint) => {\r\n        e.preventDefault();\r\n        props.history.push(endpoint);    \r\n    }\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"/todos\" onClick={(e) => gotoRoute(e, '/todos')}>Todos</Nav.Link>\r\n                <Nav.Link href=\"/contact\" onClick={(e) => gotoRoute(e, '/contact')}>Contact</Nav.Link>\r\n            </Nav>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default withRouter(NavBar);","export const ADD_TASK = 'ADD_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const COMPLETE_TASK = 'COMPLETE_TASK';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const SHOW_ALL = 'SHOW_ALL';\r\nexport const SHOW_ACTIVE = 'SHOW_ACTIVE';\r\nexport const SHOW_COMPLETED = 'SHOW_COMPLETED';\r\nexport const SET_TODOLIST_FILTER = 'SET_TODOLIST_FILTER';","import { ADD_TASK, DELETE_TASK, COMPLETE_TASK, EDIT_TASK, SHOW_ACTIVE, SHOW_ALL, SHOW_COMPLETED, SET_TODOLIST_FILTER } from '../types/types';\r\n\r\nexport const addTodo = title => {\r\n    return {\r\n        type: ADD_TASK,\r\n        title: title,\r\n    }\r\n};\r\n\r\nexport const completeTodo = (id) => {\r\n    return {\r\n        type: COMPLETE_TASK,\r\n        id: id\r\n    }\r\n}\r\n\r\nexport const deleteTodo = (id) => {\r\n    return {\r\n        type: DELETE_TASK,\r\n        id: id\r\n    }\r\n}\r\n\r\nexport const editTodo = (id, title) => {\r\n    return {\r\n        type: EDIT_TASK,\r\n        title: title,\r\n        id: id\r\n    }\r\n};\r\n\r\nexport const todolistFilter  = filter => ({\r\n    type: SET_TODOLIST_FILTER,\r\n    filter\r\n});\r\n\r\nexport const setTodoListFilter = filter => ({\r\n    type: SET_TODOLIST_FILTER,\r\n    filter\r\n})\r\n\r\nexport const todolistFilters = {\r\n    SHOW_ALL: SHOW_ALL,\r\n    SHOW_COMPLETED: SHOW_COMPLETED,\r\n    SHOW_ACTIVE: SHOW_ACTIVE\r\n};","import React from 'react';\r\nimport { Row, Col, Form, Button, Badge, Table } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../store/actions/TodosAction';\r\nimport { todolistFilters } from '../store/actions/TodosAction';\r\n\r\nclass Todos extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            title: '',\r\n            invaid: false,\r\n            objectToEdit: null\r\n        }\r\n    }\r\n\r\n    addTodo = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        let { title, objectToEdit } = this.state;\r\n        \r\n        if (!title && title.trim().length <= 0) {\r\n            this.setState({ invalid: true });\r\n            return;\r\n        }\r\n\r\n        if (objectToEdit) {\r\n            await this.props.editTodo(objectToEdit.id, title);\r\n        } else {\r\n            await this.props.addTodo(title);\r\n        }\r\n        \r\n        this.setState({ title: '', objectToEdit: null });\r\n    }\r\n\r\n    \r\n    handleComplete = (id) => {\r\n      this.props.completeTodo(id);\r\n    }\r\n\r\n    handleEdit = (elem) => {\r\n      this.setState({ objectToEdit: elem, title: elem.title });\r\n    }\r\n\r\n    handleDelete = (id) => {\r\n      this.props.deleteTodo(id);\r\n    }\r\n  \r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <Row className='s-nav-comp'>\r\n                    <Col md={{ span: 8, offset: 2 }} >\r\n                        <Form onSubmit={(e)=> this.addTodo(e)}>\r\n                            <Form.Row>\r\n                                <Col md={9}>\r\n                                    <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                                        <Form.Control \r\n                                            type=\"text\" \r\n                                            name=\"title\"\r\n                                            required\r\n                                            placeholder=\"task...\" \r\n                                            value={this.state.title}\r\n                                            onChange={(e)=> this.setState({ title: e.target.value })}\r\n                                            className={ this.state.invalid ? 'in-valid' : '' }\r\n                                            onFocus={()=> this.setState({ invalid: false })}\r\n                                        />\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <Button variant='outline-primary' className='w-f' type=\"submit\" onClick={(e) => this.addTodo(e) }>{ this.state.objectToEdit ? 'Save' : 'ADD' }</Button>\r\n                                </Col>\r\n                            </Form.Row>\r\n                        </Form>\r\n                        <Row>\r\n                            <Col>\r\n                                <Table hover>\r\n                                    <tbody>\r\n                                        {\r\n                                            this.props.list.map(elem => (\r\n                                                <tr className=\"list-style\" key={elem.id}>\r\n                                                    <td style={{ width: '5%' }}>\r\n                                                        <input type=\"checkbox\"\r\n                                                            defaultChecked={elem.completed}\r\n                                                            required={true}\r\n                                                            onClick={() => this.handleComplete(elem.id)}\r\n                                                        />\r\n                                                    </td>\r\n                                                    <td  style={{ width: '65%' }}>{elem.title}</td>\r\n                                                    <td style={{ width: '10%' }}>{ elem.completed ? <Badge pill className=\"custom-badge\" variant='success'> completed </Badge> : null } </td>\r\n                                                    <td style={{ width: '10%' }}><Button variant=\"outline-primary\" onClick={()=>this.handleEdit(elem)}>Edit</Button></td>\r\n                                                    <td style={{ width: '10%' }}><Button variant=\"outline-primary\" onClick={()=>this.handleDelete(elem.id)}>Delete</Button></td>\r\n                                                </tr>\r\n                                            ))\r\n                                        }\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                          <Col>\r\n                              <h6>SHOW:</h6>\r\n                              <div>\r\n                                  <span className={ this.props.selectedFilter && this.props.selectedFilter == 'SHOW_ALL' ? `badge badge-secondary filter-btn filter-active` : 'badge badge-secondary filter-btn' } onClick={(e)=> this.props.setTodoListFilter('SHOW_ALL')}>ALL</span>\r\n                                  <span className={this.props.selectedFilter && this.props.selectedFilter == 'SHOW_ACTIVE' ? `badge badge-secondary filter-btn filter-active` : 'badge badge-secondary filter-btn'} onClick={(e)=> this.props.setTodoListFilter('SHOW_ACTIVE')}>ACTIVE</span>\r\n                                  <span className={this.props.selectedFilter && this.props.selectedFilter == 'SHOW_COMPLETED' ? `badge badge-secondary filter-btn filter-active` : 'badge badge-secondary filter-btn'} onClick={(e)=> this.props.setTodoListFilter('SHOW_COMPLETED')}>COMPLETED</span>\r\n                              </div>\r\n                          </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n\r\nconst getTodoList = (todos, filter) => {\r\n  switch(filter) {\r\n      case todolistFilters.SHOW_ALL:\r\n          return todos;\r\n      case todolistFilters.SHOW_ACTIVE:\r\n          return todos.filter(t => !t.completed);\r\n      case todolistFilters.SHOW_COMPLETED:\r\n          return todos.filter(t => t.completed);\r\n      default: \r\n          throw new Error('unknown filter' + filter);            \r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n      list: getTodoList(state.todoslist.todos, state.todolistFilter),\r\n      selectedFilter: state.todolistFilter\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, actions)(Todos);","import React from 'react';\r\nimport { Row, Col, Form, Button } from 'react-bootstrap';\r\n\r\nclass Contact extends React.Component {\r\n  \r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      firstName: '',\r\n      lastName: '',\r\n      email: '',\r\n      comments: ''\r\n    }\r\n  }\r\n  \r\n  handleTextChange = (e) => {\r\n    this.setState({ [e.name]: e.value });\r\n  }\r\n  \r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ firstName: '', lastName: '', email: '', comments: '' });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Row className='s-nav-comp'>\r\n          <Col md={{ span: 8, offset: 2 }}>\r\n            <Form onSubmit={(e) => this.handleSubmit()}>\r\n              <Form.Row>\r\n                <Col>\r\n                  <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                    <Form.Label>First Name</Form.Label>\r\n                    <Form.Control \r\n                      type=\"text\"\r\n                      name=\"firstName\"\r\n                      required \r\n                      placeholder=\"Enter First Name\"\r\n                      value={this.state.firstName}\r\n                      onChange={(e) => this.handleTextChange(e.target)}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Col>\r\n                  <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                    <Form.Label>Last Name</Form.Label>\r\n                    <Form.Control \r\n                      type=\"text\"\r\n                      name=\"lastName\" \r\n                      required\r\n                      placeholder=\"Enter Last Name\"\r\n                      value={this.state.lastName}\r\n                      onChange={(e) => this.handleTextChange(e.target)}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Col>\r\n                  <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Email</Form.Label>\r\n                    <Form.Control \r\n                      type=\"email\"\r\n                      name=\"email\" \r\n                      required\r\n                      placeholder=\"example@gmail.com\"\r\n                      value={this.state.email}\r\n                      onChange={(e) => this.handleTextChange(e.target)}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Col>\r\n                  <Form.Group>\r\n                    <Form.Label>Comments</Form.Label>\r\n                    <Form.Control \r\n                      as=\"textarea\"\r\n                      rows={3}\r\n                      required\r\n                      name=\"comments\" \r\n                      placeholder=\"Comments...\"\r\n                      value={this.state.comments}\r\n                      onChange={(e) => this.handleTextChange(e.target)}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Col>\r\n                  <Button className=\"w-f\" variant=\"primary\" type=\"submit\" onClick={(e)=> this.handleSubmit(e)}>Submit</Button>\r\n                </Col>\r\n              </Form.Row>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Contact;","import './App.css';\nimport NavBar from './components/NavBar';\nimport { Switch, Route } from 'react-router-dom';\nimport Todos from './components/Todos';\nimport Contact from './components/Contact';\n\nfunction App() {\n  return (\n    <div>\n      <NavBar />\n      <Switch>\n        <Route exact path={\"/todos\"} component={Todos} />\n        <Route exact path={\"/contact\"} component={Contact} />  \n      </Switch>      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_TASK, COMPLETE_TASK, DELETE_TASK, EDIT_TASK } from '../types/types';\r\n\r\nconst initialState = { \r\n    todos : []\r\n};\r\n\r\nfunction getId(state) {\r\n    return state.todos.reduce((maxId, todo) => {\r\n        return Math.max(todo.id, maxId)\r\n    }, -1) + 1\r\n}\r\n\r\nlet reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TASK:\r\n            return Object.assign({}, state, {\r\n                todos: [\r\n                    {\r\n                        title: action.title,\r\n                        completed: false,\r\n                        updated: false,\r\n                        id: getId(state)\r\n                    }, \r\n                    ...state.todos\r\n                ]\r\n            })\r\n        case COMPLETE_TASK:\r\n            return Object.assign({}, state, {\r\n                todos: state.todos.map((todo) => {\r\n                return todo.id === action.id ?\r\n                Object.assign({}, todo, {updated: false, completed: ! \r\n                todo.completed}) : todo\r\n                })\r\n            })\r\n        case EDIT_TASK:\r\n            return Object.assign({}, state, {\r\n                todos: state.todos.map((todo) => {\r\n                return todo.id === action.id ?\r\n                Object.assign({}, todo, {updated: true, title: action.title }) : todo\r\n                })\r\n            })\r\n        case DELETE_TASK:\r\n            return Object.assign({}, state, {\r\n                todos: state.todos.filter((todo) => {\r\n                    return todo.id !== action.id\r\n                })\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n","import { todolistFilters } from \"../actions/TodosAction\";\r\nimport { SET_TODOLIST_FILTER } from '../types/types';\r\n\r\nconst todolistFilter = (state=todolistFilters.SHOW_ALL, action) => {\r\n    switch(action.type) {\r\n        case SET_TODOLIST_FILTER:\r\n            return action.filter;\r\n        default: return state;    \r\n    }\r\n}\r\n\r\nexport default todolistFilter;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport { Provider } from 'react-redux';\nimport { combineReducers, createStore } from 'redux';\nimport todosActionReducer from './store/reducers/TodosReducer';\nimport todolistFilter from './store/reducers/TodosFilterReducer';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst creducer = combineReducers({\n  todoslist: todosActionReducer,\n  todolistFilter\n})\n\nconst store = (window.devToolsExtension ? window.devToolsExtension () (createStore) : createStore) (creducer);\n\nReactDOM.render(\n  <>\n    <Provider store={store}>\n      <BrowserRouter basename=\"/todolist\">\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}